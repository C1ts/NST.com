document.addEventListener('DOMContentLoaded', function() {
    // Debug variables
    const debug = {
        isScrolling: false,
        lastScrollPosition: 0,
        headerVisible: true
    };

    // Sample code with debugger statements
    function initializeDebugging() {
        console.log('Debugging initialized');
        // Debugger statement to pause execution in developer tools
        debugger;
        
        // This will help track scroll events for troubleshooting
        debug.isDebuggingEnabled = true;
        
        console.log('Debug mode enabled:', debug.isDebuggingEnabled);
        // Another debugger statement to pause execution
        debugger;
        
        return debug.isDebuggingEnabled;
    }

    // Initialize debugging if in development environment
    const isDev = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
    if (isDev) {
        initializeDebugging();
    }

    // Header scroll behavior
    const header = document.getElementById('main-header');
    let lastScrollY = window.scrollY;

    // Handle scrolling behavior for header
    function handleScroll() {
        // Track scroll position for debugging
        debug.lastScrollPosition = window.scrollY;
        
        // If debugging is enabled, log the scroll position
        if (debug.isDebuggingEnabled) {
            console.log('Scroll position:', debug.lastScrollPosition);
            // Uncomment to pause execution on scroll
            // debugger;
        }

        // Hide header on scroll down, show on scroll up
        const currentScrollY = window.scrollY;
        
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
            // Scrolling down and not at the top
            header.classList.add('hidden');
            debug.headerVisible = false;
        } else if (currentScrollY < lastScrollY || currentScrollY <= 100) {
            // Scrolling up or at the top
            header.classList.remove('hidden');
            debug.headerVisible = true;
        }
        
        lastScrollY = currentScrollY;
    }

    // Throttle function to limit how often the scroll event fires
    function throttle(callback, delay) {
        let throttleTimeout;
        return function() {
            const context = this;
            const args = arguments;
            
            if (throttleTimeout) clearTimeout(throttleTimeout);
            
            throttleTimeout = setTimeout(function() {
                callback.apply(context, args);
                throttleTimeout = null;
            }, delay);
        }
    }

    // Add scroll event listener with throttling
    window.addEventListener('scroll', throttle(handleScroll, 100));

    // Counter animation for stats
    function animateCounters() {
        const counters = document.querySelectorAll('.stat-number');
        const speed = 200; // Lower is faster
        
        counters.forEach(counter => {
            // Only animate if not already animated
            if (counter.classList.contains('animated')) return;
            
            const target = +counter.getAttribute('data-count');
            let count = 0;
            
            const updateCount = () => {
                const increment = target / speed;
                
                if (count < target) {
                    count += increment;
                    counter.textContent = Math.ceil(count);
                    setTimeout(updateCount, 1);
                } else {
                    counter.textContent = target;
                    counter.classList.add('animated');
                }
            };
            
            updateCount();
        });
    }

    // Enhanced scroll animations
    const animateOnScroll = () => {
        const elements = document.querySelectorAll('.fade-in-up, .fade-in-left, .fade-in-right');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Add visible class to trigger animation
                    entry.target.classList.add('visible');
                    
                    // If this is a stats section, start the counter animation
                    if (entry.target.closest('#stats')) {
                        animateCounters();
                    }
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        });
        
        elements.forEach(element => {
            observer.observe(element);
        });
    };
    
    // Initialize animation on scroll
    animateOnScroll();

    // FAQ accordion functionality
    const faqQuestions = document.querySelectorAll('.faq-question');
    
    faqQuestions.forEach(question => {
        const answer = question.nextElementSibling;
        
        // Hide all answers initially
        answer.style.display = 'none';
        
        question.addEventListener('click', () => {
            // Toggle active class
            question.classList.toggle('active');
            
            // Toggle visibility of answer with animation
            if (question.classList.contains('active')) {
                answer.style.display = 'block';
                answer.style.maxHeight = '0';
                
                // Force reflow
                answer.offsetHeight;
                
                // Animate height
                answer.style.transition = 'max-height 0.5s ease';
                answer.style.maxHeight = answer.scrollHeight + 'px';
                
                // Example debug statement
                if (debug.isDebuggingEnabled) {
                    console.log('FAQ opened:', question.textContent);
                    debugger;
                }
            } else {
                answer.style.maxHeight = '0';
                
                // Remove after animation is complete
                setTimeout(() => {
                    answer.style.display = 'none';
                }, 500);
            }
        });
    });

    // Mobile menu toggle
    const menuToggle = document.querySelector('.mobile-menu-toggle');
    const navMenu = document.querySelector('nav ul');
    
    // Set up mobile menu
    if (menuToggle) {
        menuToggle.addEventListener('click', function() {
            navMenu.classList.toggle('show');
        });
    }
    
    // Close menu when clicking outside
    document.addEventListener('click', function(event) {
        if (navMenu && navMenu.classList.contains('show') && !event.target.closest('nav') && !event.target.closest('.mobile-menu-toggle')) {
            navMenu.classList.remove('show');
        }
    });
    
    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                // Calculate the offset to account for fixed header
                const headerHeight = header.offsetHeight;
                const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
                
                // Close mobile menu after clicking
                if (navMenu && navMenu.classList.contains('show')) {
                    navMenu.classList.remove('show');
                }
            }
        });
    });
    
    // Throttle function to limit event firing
    function throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    // Header scroll behavior
    let lastScrollTop = 0;
    window.addEventListener('scroll', throttle(function() {
        const scrollTop = window.scrollY || document.documentElement.scrollTop;
        
        if (scrollTop > 100) {
            // Scrolling down
            if (scrollTop > lastScrollTop && scrollTop > header.offsetHeight) {
                header.classList.add('hidden');
            } else {
                // Scrolling up
                header.classList.remove('hidden');
            }
        }
        
        lastScrollTop = scrollTop;
    }, 100));
    
    // FAQ accordion
    faqQuestions.forEach(question => {
        question.addEventListener('click', () => {
            const answer = question.nextElementSibling;
            
            // Toggle active class
            question.classList.toggle('active');
            
            // Toggle visibility
            if (answer.style.display === 'block') {
                answer.style.display = 'none';
            } else {
                answer.style.display = 'block';
            }
        });
    });
    
    // Initialize with first FAQ open
    if (faqQuestions.length > 0) {
        faqQuestions[0].click();
    }
    
    // Counter animation for stats
    function animateCounters() {
        const statNumbers = document.querySelectorAll('.stat-number');
        
        statNumbers.forEach(statEl => {
            const target = parseInt(statEl.getAttribute('data-count'), 10);
            const duration = 2000; // 2 seconds
            const startTime = performance.now();
            let currentCount = 0;
            
            const easeOutQuad = (t) => t * (2 - t);
            
            function updateCounter(currentTime) {
                const elapsedTime = currentTime - startTime;
                const progress = Math.min(elapsedTime / duration, 1);
                const easedProgress = easeOutQuad(progress);
                currentCount = Math.floor(easedProgress * target);
                
                statEl.textContent = currentCount;
                
                if (progress < 1) {
                    requestAnimationFrame(updateCounter);
                } else {
                    statEl.textContent = target;
                }
            }
            
            requestAnimationFrame(updateCounter);
        });
    }
    
    // Animate elements when they come into view
    const animateElements = document.querySelectorAll('.animate-on-scroll');
    
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.15
    };
    
    const handleIntersection = (entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const el = entry.target;
                const delay = el.dataset.delay || 0;
                
                setTimeout(() => {
                    el.classList.add('animated');
                }, delay);
                
                observer.unobserve(el);
                
                // If this is a stats section, start the counter animation
                if (el.id === 'stats') {
                    animateCounters();
                }
            }
        });
    };
    
    const observer = new IntersectionObserver(handleIntersection, observerOptions);
    
    animateElements.forEach(el => {
        observer.observe(el);
    });
    
    // Add parallax effect to hero background
    const heroSection = document.getElementById('hero');
    const heroBackground = document.querySelector('.hero-background');
    
    if (heroSection && heroBackground) {
        window.addEventListener('scroll', throttle(function() {
            const scrollPosition = window.scrollY;
            if (scrollPosition < heroSection.offsetHeight) {
                const translateY = scrollPosition * 0.3;
                heroBackground.style.transform = `translateY(${translateY}px)`;
                
                // Also adjust opacity for a fade effect
                const opacity = 1 - (scrollPosition / (heroSection.offsetHeight * 0.8));
                heroBackground.style.opacity = Math.max(opacity, 0.2);
            }
        }, 20));
    }
    
    // Animate video reveal
    const videoContainer = document.querySelector('.video-container');
    if (videoContainer) {
        setTimeout(() => {
            videoContainer.classList.add('animate__animated', 'animate__fadeIn');
            videoContainer.style.opacity = 1;
        }, 500);
    }
    
    // Hover effects for feature cards
    const featureCards = document.querySelectorAll('.feature-card');
    featureCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            const iconElement = this.querySelector('.feature-icon');
            if (iconElement) {
                iconElement.style.animation = 'none';
                setTimeout(() => {
                    iconElement.style.animation = 'float 3s ease-in-out infinite';
                }, 10);
            }
        });
    });
    
    // Add hover effects to elements
    function addHoverEffects() {
        // Add more hover effects here if needed
    }
    
    // Initialize hover effects
    addHoverEffects();
}); 